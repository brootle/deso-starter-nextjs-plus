{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "dynamicRoutes": [
    {
      "page": "/[username]",
      "regex": "^/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPusername": "nxtPusername"
      },
      "namedRegex": "^/(?<nxtPusername>[^/]+?)(?:/)?$"
    },
    {
      "page": "/[username]/feed",
      "regex": "^/([^/]+?)/feed(?:/)?$",
      "routeKeys": {
        "nxtPusername": "nxtPusername"
      },
      "namedRegex": "^/(?<nxtPusername>[^/]+?)/feed(?:/)?$"
    },
    {
      "page": "/[username]/notifications",
      "regex": "^/([^/]+?)/notifications(?:/)?$",
      "routeKeys": {
        "nxtPusername": "nxtPusername"
      },
      "namedRegex": "^/(?<nxtPusername>[^/]+?)/notifications(?:/)?$"
    },
    {
      "page": "/[username]/posts",
      "regex": "^/([^/]+?)/posts(?:/)?$",
      "routeKeys": {
        "nxtPusername": "nxtPusername"
      },
      "namedRegex": "^/(?<nxtPusername>[^/]+?)/posts(?:/)?$"
    },
    {
      "page": "/[username]/posts/[posthash]",
      "regex": "^/([^/]+?)/posts/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPusername": "nxtPusername",
        "nxtPposthash": "nxtPposthash"
      },
      "namedRegex": "^/(?<nxtPusername>[^/]+?)/posts/(?<nxtPposthash>[^/]+?)(?:/)?$"
    },
    {
      "page": "/[username]/settings/posts",
      "regex": "^/([^/]+?)/settings/posts(?:/)?$",
      "routeKeys": {
        "nxtPusername": "nxtPusername"
      },
      "namedRegex": "^/(?<nxtPusername>[^/]+?)/settings/posts(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/(.)compose/post",
      "regex": "^/\\(\\.\\)compose/post(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/\\(\\.\\)compose/post(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/compose/post",
      "regex": "^/compose/post(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/compose/post(?:/)?$"
    },
    {
      "page": "/manifest.webmanifest",
      "regex": "^/manifest\\.webmanifest(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/manifest\\.webmanifest(?:/)?$"
    },
    {
      "page": "/test-stuff",
      "regex": "^/test\\-stuff(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/test\\-stuff(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "RSC",
    "varyHeader": "RSC, Next-Router-State-Tree, Next-Router-Prefetch, Next-Router-Segment-Prefetch",
    "prefetchHeader": "Next-Router-Prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "Next-Router-Segment-Prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  },
  "rewrites": {
    "beforeFiles": [
      {
        "source": "/compose/post",
        "destination": "/(.)compose/post",
        "has": [
          {
            "type": "header",
            "key": "Next-Url",
            "value": "(?:\\/(.*))?[\\/#\\?]?"
          }
        ],
        "regex": "^/compose/post(?:/)?$"
      }
    ],
    "afterFiles": [],
    "fallback": []
  }
}